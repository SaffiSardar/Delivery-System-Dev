

### **Step 1: Install Prerequisites**
1. **Install VS Code**  
   - Download and install VS Code from the [official website](https://code.visualstudio.com/).

2. **Install Python**  
   - Download and install Python from the [official Python website](https://www.python.org/downloads/).
   - During installation, check the box to "Add Python to PATH."

3. **Install PostgreSQL**  
   - Download and install PostgreSQL from the [official website](https://www.postgresql.org/download/).
   - Set a password for the PostgreSQL user (`postgres`) during installation.

---

### **Step 2: Set Up VS Code**
1. **Install Extensions in VS Code**  
   - **Python Extension**: Open VS Code, go to the Extensions view (`Ctrl+Shift+X`), search for "Python," and install the extension published by Microsoft.
   - **SQLTools - PostgreSQL/Redshift Driver**: Search for "SQLTools PostgreSQL/Redshift" and install it to connect to your PostgreSQL database directly from VS Code.
   - **SQLAlchemy Extension** (optional): Search for "SQLAlchemy" and install it for better syntax highlighting and autocompletion.

---

### **Step 3: Set Up Your Project Directory**
1. **Create a Project Directory**  
   - Create a directory where you’ll store all your code files.

   Example:
   ```bash
   mkdir my_project
   cd my_project
   ```

---

### **Step 4: Set Up a Python Virtual Environment**
1. **Open the Terminal in VS Code**  
   - In VS Code, open the integrated terminal by pressing `Ctrl+` (backtick).

2. **Navigate to Your Project Directory**  
   - Use `cd` commands to navigate to your project directory.

3. **Create a Virtual Environment**  
   - Run the following command to create a virtual environment:
   ```bash
   python -m venv venv
   ```

4. **Activate the Virtual Environment**  
   - On **Windows**:
     ```bash
     venv\Scripts\activate
     ```
   - On **macOS/Linux**:
     ```bash
     source venv/bin/activate
     ```

---

### **Step 5: Install Required Python Packages**
1. **Install SQLAlchemy and psycopg2**  
   - With your virtual environment activated, run the following command:
   ```bash
   pip install sqlalchemy psycopg2
   ```

---

### **Step 6: Set Up a PostgreSQL Database**
1. **Using `psql`**  
   - Open a terminal and type:
     ```bash
     psql -U postgres
     ```
   - Enter your password.
   - Create a new database:
     ```sql
     CREATE DATABASE mydatabase;
     ```

2. **Using pgAdmin**  
   - Open pgAdmin, connect to your server, right-click on "Databases," and choose "Create Database."

---

### **Step 7: Set Up Your Project Files**
1. **Create a `database.py` File**  
   - This file contains the code to set up the database connection and session.

   **`database.py`**:
   ```python
   from sqlalchemy import create_engine
   from sqlalchemy.ext.declarative import declarative_base
   from sqlalchemy.orm import sessionmaker

   DATABASE_URL = "postgresql+psycopg2://postgres:yourpassword@localhost/mydatabase"

   engine = create_engine(DATABASE_URL)
   SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
   Base = declarative_base()

   def get_db():
       db = SessionLocal()
       try:
           yield db
       finally:
           db.close()
   ```
   - Replace `"yourpassword"` with the password you set during PostgreSQL installation and `"mydatabase"` with the name of your database.

2. **Create a `models.py` File**  
   - This file contains the SQLAlchemy models (table definitions).

   **`models.py`**:
   ```python
   from sqlalchemy import Column, Integer, String
   from .database import Base

   class User(Base):
       __tablename__ = 'users'
       
       id = Column(Integer, primary_key=True, index=True)
       name = Column(String, index=True)
       email = Column(String, unique=True, index=True)
   ```

3. **Create an `app.py` File**  
   - This is the main entry point where you create tables, add data, and query the database.

   **`app.py`**:
   ```python
   from .database import engine, Base
   from .models import User

   # Create the tables in the database
   Base.metadata.create_all(bind=engine)

   # Example usage: Insert a user
   from .database import SessionLocal

   def create_user(name: str, email: str):
       db = SessionLocal()
       new_user = User(name=name, email=email)
       db.add(new_user)
       db.commit()
       db.refresh(new_user)
       db.close()
       return new_user

   # Example usage
   user = create_user(name="Jane Doe", email="jane.doe@example.com")
   print(f"Created user: {user.name}, {user.email}")
   ```

4. **Create a `requirements.txt` File**  
   - This file lists all the Python packages your project depends on.

   **`requirements.txt`**:
   ```txt
   sqlalchemy
   psycopg2
   ```

---

### **Step 8: Running Your Application**
1. **Run Your Script**  
   - Execute the `app.py` script to interact with your database:
     ```bash
     python app.py
     ```
   - If everything is set up correctly, this should create the `users` table in your PostgreSQL database and insert a user.

---

### **Step 9: Troubleshooting**
- **Check PostgreSQL and Connection Details**  
   - Ensure PostgreSQL is running and the connection string in `database.py` is correct.
   - Verify the PostgreSQL server’s host, port, username, and database name.

---

### **Step 10: Where to Write Batch Commands on Windows**
1. **Command Prompt (cmd)**  
   - Open Command Prompt by searching for "cmd" in the Start menu.

2. **PowerShell**  
   - Open PowerShell by searching for "PowerShell" in the Start menu.

3. **VS Code Terminal**  
   - Open the integrated terminal in VS Code by pressing `Ctrl+` (backtick).

4. **Batch Script File (.bat)**  
   - Create and run a `.bat` file to execute batch commands.

---

### **Step 11: Writing Code to Interact with the Database**
1. **Database Connection and Models**  
   - Define and manage your database tables using the files `database.py` and `models.py`.

2. **Inserting and Querying Data**  
   - Use the `app.py` script to create tables, insert data, and query the database.

---

### **Step 12: Running and Expanding Your Project**
1. **Run Your Project**  
   - Execute the `app.py` script to interact with your database.

2. **Organizing and Expanding**  
   - Continue adding features and modules to your project, keeping your code organized across multiple files.

---




































Git Setup: https://chatgpt.com/share/4128f115-10ed-4dcb-8bd6-c8d2ab6000af
Sure! Here's a concise summary with the relevant code snippets:

### 1. **Setting Up Git and GitHub**

- **Install Git**: Follow platform-specific installation instructions.
- **Configure Git**:
   ```bash
   git config --global user.name "Your Name"
   git config --global user.email "your.email@example.com"
   ```
- **Create a New GitHub Repository**: Go to GitHub, create a new repo, and copy the URL.
- **Initialize Local Git Repository**:
   ```bash
   cd /path/to/your/folder
   git init
   ```
- **Add and Commit Files**:
   ```bash
   git add .
   git commit -m "Initial commit"
   ```
- **Link to GitHub**:
   ```bash
   git remote add origin https://github.com/yourusername/your-repo-name.git
   ```
- **Push Files to GitHub**:
   ```bash
   git push -u origin master
   ```

### 2. **Handling Push Errors (Email Privacy Issue)**

- **Use GitHub’s No-Reply Email**:
   ```bash
   git config --global user.email "12345678+username@users.noreply.github.com"
   ```
   OR
- **Disable Email Privacy**: Go to [GitHub Email Settings](https://github.com/settings/emails) and uncheck "Keep my email addresses private."

### 3. **Workflow for Future Changes**

- **Make Changes**: Edit your files.
- **Check Status**:
   ```bash
   git status
   ```
- **Add Changes**:
   ```bash
   git add .
   ```
   OR to add specific files:
   ```bash
   git add filename
   ```
- **Commit Changes**:
   ```bash
   git commit -m "Describe the changes"
   ```
- **Push to GitHub**:
   ```bash
   git push
   ```

This sequence helps you manage your project and keep it synced with GitHub.












1.PostgresQl
2.Connect Postgresql database with python
3.Make models in python
4.setup alembic env and connect with model
5.run code through migrations
6.Install uvicorn and fastapi
8.import fastapi in the database file and make api in it
9.follow to make api: https://www.geeksforgeeks.org/fastapi-crud-operations/
10.test api by running file and then running the ip with /docs to check api
11.setup pytest for unit testing
12.setup conftest, and check sample test, if its running or not through swaggerui
13.make pytest by constraints->model.py->myapis.py->test_app.py(take care of MM)
14.Benchmark by pytest_benchmark,(use faker to setup random chars ro avoid ducplication while Benchmarking)

